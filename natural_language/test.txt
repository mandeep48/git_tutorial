import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;


public class Program1 {

	public void processFile(String fileName){
		HashMap<Integer, HashMap<String, Integer>> map = new HashMap<>();
		HashMap<String, Integer> wordCountMap = new HashMap<>();
		BufferedReader br=null;
		BufferedWriter bw = null;
		StringBuilder sb = new StringBuilder();
		long milliTime = System.currentTimeMillis();
		try{
			br = new BufferedReader(new FileReader(new File(fileName)));
			String line = null;
			int lineCount = 0;
			int noOfWords = 0;
			while((line = br.readLine()) != null){
				if(!line.isEmpty()){
					if(!line.equals("END")){
						lineCount++;
						if(lineCount == 2) {
							noOfWords = Integer.parseInt(line);
						}
						else if(lineCount > 2){
							int matchCount = 0;
							int length = line.length();
							if(lineCount - 2 <= noOfWords){
								if(map.containsKey(length)){
									if(map.get(length).containsKey(line)){
										wordCountMap.put(line, map.get(length).get(line) + 1);
									} else {
										wordCountMap = map.get(length);
										wordCountMap.put(line, 1);
									}
									map.put(length, wordCountMap);
								} else {
									wordCountMap = new HashMap<>();
									wordCountMap.put(line, 1);
								}
								map.put(length, wordCountMap);
							} else {
								System.out.println("original words for: " + line);
								sb.append("original words for: " + line + "\n");
								if(map.containsKey(length)){
									for(String searchKey: map.get(length).keySet()){
										char[] charAry = searchKey.toCharArray();
										Arrays.sort(charAry);
										String sortedSearchKey = new String(charAry);
										charAry = line.toCharArray();
										Arrays.sort(charAry);
										String sortedLine = new String(charAry);
										if(sortedLine.equals(sortedSearchKey)){
											matchCount++;
											System.out.println("\t" + matchCount + ")" + "  " + searchKey);
											sb.append("\t" + matchCount + ")" + "  " + searchKey + "\n");
										} else {
											//System.out.println(line + " != " + searchKey);
										}
									}

								} else {
									//map does not contain this words of this length
									//System.out.println(line + " not found");
								}
								if(matchCount == 0){
									System.out.println("No original words for: " + line);
									sb.append("No original words for: " + line + "\n");
								}
							}
						}
					} else {
						lineCount = 1;
						map = new HashMap<>();
						wordCountMap = new HashMap<>();
					}
				}
			}
			/*if(fileEndCondition){
				System.out.println("File end...");
				System.out.println(System.nanoTime() - time);
				System.out.println(System.currentTimeMillis() - milliTime);
			}*/
			
			bw = new BufferedWriter(new FileWriter(new File("output.txt")));
			bw.write(sb.toString().trim());
			bw.close();
			
		} catch(Exception e){
			e.printStackTrace();
		} finally {
			if(br != null){
				try {
					br.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			if(bw != null){
				try {
					bw.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		System.out.println("Total time for the algorithm: " + (System.currentTimeMillis() - milliTime) + " milliseconds");
	}

	public static void main(String[] args) {
		Program1 p = new Program1();
		p.processFile("sampleinput2.txt");
	}
}
